#!/usr/bin/env python3

import json
import locale
import operator
import sys
from collections import defaultdict
from operator import itemgetter

from reportlab.graphics.charts.legends import Legend
from reportlab.graphics.charts.piecharts import Pie
from reportlab.graphics.shapes import Drawing
from reportlab.lib import colors
from reportlab.lib.colors import PCMYKColor
from reportlab.lib.validators import Auto
from reportlab.graphics.shapes import Drawing
from reportlab.graphics.charts.barcharts import VerticalBarChart

import emails
import reports
import os


def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(
        car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """
    Find model with highest revenue (already done!)
    Find the car model with highest number of sales.
    Find the most popular year (based on sales)
    """

    max_revenue = {"revenue": 0}  # points to item that has highest revenue
    most_sales = {"total_sales": 0}  # points to item that has highest sales
    sales_by_year = defaultdict(int)

    for item in data:
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        # Calculate the revenue generated by this model (total_sales * price)
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item
        # find model with most sales
        if item["total_sales"] > most_sales["total_sales"]:
            most_sales = item
        # find most popular car_year (by sales)
        sales_by_year[item["car"]["car_year"]] += item["total_sales"]

    sorted_sales = sorted(sales_by_year.items(), key=itemgetter(1), reverse=True)
    summary = [
        "The {} generated the most revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["revenue"]),
        "The {} had the most sales: {}".format(format_car(most_sales["car"]), most_sales["total_sales"]),
        "The most popular year was {} with {} sales.".format(sorted_sales[0][0], sorted_sales[0][1])
    ]

    return summary


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
    return table_data


def get_pie_chart(data):
    report_pie = Pie()
    report_pie.width = 380
    report_pie.height = 380
    report_pie.x = 42
    report_pie.y = -230

    report_pie.data = [row[1] for row in data]  # only 2nd column
    report_pie.labels = [row[0] for row in data]  # only 1st column
    report_chart = Drawing()
    report_chart.add(report_pie)
    return (report_chart)


def make_bar_chart(data):
    drawing = Drawing(1375, 550)
    bc = VerticalBarChart()
    bc.x = 50
    bc.y = 25
    bc.height = 500
    bc.width = 1300
    # bc.strokeColor = colors.black
    bc.valueAxis.valueMin = 21000000  # hard-coded here;  could math it to figure out the bounds
    bc.valueAxis.valueMax = 23000000  # hard-coded here;  could math it to figure out the bounds
    #bc.valueAxis.valueStep = 10
    # bc.categoryAxis.labels.boxAnchor = 'ne'
    # bc.categoryAxis.labels.dx = 8
    # bc.categoryAxis.labels.dy = -1
    # bc.categoryAxis.labels.angle = 30

    # bc.bars[0].fillColor = PCMYKColor(0, 100, 100, 40, alpha=85)
    # bc.bars[1].fillColor = PCMYKColor(23, 51, 0, 4, alpha=85)

    bc.data = [[row[1] for row in data]]  # bar chart needs list of lists; store only 2nd column
    names = [row[0] for row in data]
    bc.categoryAxis.categoryNames = [row[0] for row in data]  # only 1st column
    bc.bars[0].fillColor = PCMYKColor(100, 100, 0, 0, alpha=85)  # blue

    drawing.add(bc)
    drawing.save(formats=['pdf'], outDir='.', fnRoot='challenge3_bar')


def add_legend(draw_obj, chart, data):
    """"""
    legend = Legend()
    legend.alignment = 'right'
    legend.x = 10
    legend.y = 70
    legend.colorNamePairs = Auto(obj=chart)
    draw_obj.add(legend)


def filter_data(data, count):
    filtered = []
    for item in data[1:count + 1]:  # skip first row of headers
        filtered.append([item[1], item[3]])

    return filtered


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    dict_cars = load_data("car_sales.json")
    summary = process_data(dict_cars)

    # turn this into a PDF report
    list_cars = cars_dict_to_table(dict_cars)
    subject = "Sales summary for last month"
    body = "<br />".join(summary)
    reports.generate("./cars.pdf", subject, body, list_cars, None)

    # CHALLENGE 1: sort table by sales
    list_cars_sorted = sorted(dict_cars, key=itemgetter('total_sales'), reverse=True)
    arr4_cars_sorted = cars_dict_to_table(list_cars_sorted)
    reports.generate("./challenge1_sorted.pdf", subject, body, arr4_cars_sorted, None)

    # CHALLENGE 2: table into pie chart
    list_cars_filtered = filter_data(arr4_cars_sorted, 10)  # only include top 10
    pie = get_pie_chart(list_cars_filtered)
    reports.generate("./challenge2_pie.pdf", subject, body, [["Top 10 models"]], pie)

    # CHALLENGE 3: table into bar chart
    arr2_revenue = [[row[1],(locale.atof(row[2].strip("$"))) * int(row[3])] for row in arr4_cars_sorted[1:]]  #skip 1st row, keep revenue and model
    rev_sorted = sorted(arr2_revenue, key = lambda x: x[1], reverse=True)[:11]   #sort by revenue, keep top 10 models
    bar = make_bar_chart(rev_sorted)
    #reports.generate("./report_challenge3_bar.pdf", subject, body, [["Top 10 models"]], bar)

    # send the PDF report as an email attachment
    sender = "automation@example.com"
    receiver = "{}@example.com".format(os.environ.get('USER'))
    body = "\n".join(summary)
    message = emails.generate(sender, receiver, subject, body, "./cars.pdf")
    emails.send(message)


if __name__ == "__main__":
    main(sys.argv)
